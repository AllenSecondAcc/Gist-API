{"version":3,"sources":["components/fetchapi.js","components/title.js","App.js","serviceWorker.js","index.js"],"names":["FetchApi","state","loading","gist","fetch","response","json","data","this","setState","length","style","width","margin","map","single","key","url","className","col","textAlign","src","owner","avatar_url","alt","login","href","html_url","rel","target","marginTop","description","created_at","updated_at","React","Component","Title","App","visible","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSAwEeA,E,4MApEbC,MAAQ,CACNC,SAAS,EACTC,KAAM,I,0LAKM,sC,SACWC,MADX,uC,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACNC,KAAKC,SAAS,CAAEN,KAAMI,EAAML,SAAS,I,qIAIrC,OAAIM,KAAKP,MAAMC,QACN,2CAGJM,KAAKP,MAAME,KAAKO,OAKnB,yBAAKC,MAAO,CAACC,MAAM,MAAOC,OAAQ,SAC/BL,KAAKP,MAAME,KAAKW,KAAI,SAAAC,GAAM,OACzB,yBAAKC,IAAKD,EAAOE,KACf,kBAAC,OAAD,KACE,kBAAC,OAAD,CAAMC,UAAY,WAAWC,IAAO,GAClC,yBAAKR,MAAS,CAACS,UAAW,WAExB,6BACE,yBACEC,IAAKN,EAAOO,MAAMC,WAClBC,IAAM,SACNN,UAAY,gBAIhB,sCAAYH,EAAOO,MAAMG,OAEzB,6BACE,uBAAGC,KAAQX,EAAOO,MAAMK,SAAUC,IAAI,sBAAsBC,OAAO,UAAnE,qBAKN,kBAAC,OAAD,CAAMX,UAAY,YAAYC,IAAK,GACjC,yBAAKR,MAAS,CAACS,UAAW,SACxB,wBAAIT,MAAS,CAACmB,UAAU,QACtB,uBAAGJ,KAAQX,EAAOY,SAAUC,IAAI,sBAAsBC,OAAO,UAA7D,OACOd,EAAOgB,aAAe,iCAAOhB,EAAOgB,eAI7C,yCAAehB,EAAOiB,YACtB,yCAAejB,EAAOkB,oBApC3B,uD,GApBUC,IAAMC,WCSdC,E,uKARP,OACI,yBAAKzB,MAAS,CAACS,UAAW,WACtB,mD,GAJIc,IAAMC,WCmBXE,E,4MAdbpC,MAAQ,CACNqC,SAAS,G,uDAIT,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GATUiB,aCMEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.658ffdb5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Grid, Cell } from 'react-mdl';\r\n\r\nclass FetchApi extends React.Component {\r\n  state = {\r\n    loading: true,\r\n    gist: [],\r\n  };\r\n  \r\n\r\n  async componentDidMount() {\r\n    const url = \"https://api.github.com/gists/public\";\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    this.setState({ gist: data, loading: false });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return <div>loading...</div>;\r\n    }\r\n\r\n    if (!this.state.gist.length) {\r\n      return <div>didn't get no gist</div>;\r\n    }\r\n\r\n    return (\r\n      <div style={{width:'80%', margin: 'auto'}}>\r\n        {this.state.gist.map(single=> (\r\n          <div key={single.url}>\r\n            <Grid>\r\n              <Cell className = 'left-col' col = {4}>\r\n                <div style = {{textAlign: 'center'}}>                \r\n                  {/* Avatar Pic */}\r\n                  <div>\r\n                    <img\r\n                      src={single.owner.avatar_url} \r\n                      alt = \"avatar\"\r\n                      className = \"avatar-img\"\r\n                    />\r\n                  </div>\r\n                  {/* User */}\r\n                  <div>User: {single.owner.login}</div>                 \r\n                  {/* GitHub Profile */}\r\n                  <div>\r\n                    <a href = {single.owner.html_url} rel=\"noopener noreferrer\" target=\"_blank\">GitHub Profile</a>\r\n                  </div>\r\n                </div>\r\n              </Cell>\r\n\r\n              <Cell className = 'right-col' col={8}>\r\n                <div style = {{textAlign: 'left'}}>\r\n                  <h5 style = {{marginTop:'0px'}}>\r\n                    <a href = {single.html_url} rel=\"noopener noreferrer\" target=\"_blank\">\r\n                      Gist{single.description && <h7>: {single.description}</h7>}\r\n                    </a>\r\n                  </h5>\r\n\r\n                  <div>Created: {single.created_at}</div>\r\n                  <div>Updated: {single.updated_at}</div>\r\n                  \r\n                </div>\r\n                \r\n              </Cell>\r\n            </Grid>\r\n          </div>\r\n        ))}\r\n      </div>           \r\n    );\r\n  }\r\n}\r\n\r\nexport default FetchApi\r\n\r\n","import React from \"react\";\r\n\r\nclass Title extends React.Component {\r\n    render() {\r\n        return (\r\n            <div style = {{textAlign: 'center'}}>\r\n                <h1>Gist Generator</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Title;","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport FetchApi from \"./components/fetchapi\";\nimport Title from \"./components/title\";\n\nclass App extends Component {\n  state = {\n    visible: true\n  };\n\n  render() {\n    return (  \n      <div className=\"App\">\n        <Title />\n        <FetchApi />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}